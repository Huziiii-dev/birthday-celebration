<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Fizah's Birthday Celebration</title>

<!-- Google Fonts -->
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&family=Sacramento&display=swap" rel="stylesheet" />

<style>
  :root {
    --primary-color: #7D5A50;
    --accent-color: #D9CAB3;
    --background-color: #F8F4F0;
    --shadow-color: rgba(125, 90, 80, 0.5);
    --button-bg: #BFA6A0;
    --button-hover-bg: #A17F79;
    --font-main: 'Poppins', sans-serif;
    --font-script: 'Sacramento', cursive;
  }

  * {
    box-sizing: border-box;
  }
  body, html {
    margin: 0; padding: 0;
    height: 100%;
    font-family: var(--font-main);
    background-color: var(--background-color);
    color: var(--primary-color);
    overflow-x: hidden;
  }

  #container {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    padding: 1rem;
    position: relative;
  }

  h1 {
    font-family: var(--font-script);
    font-size: clamp(3rem, 10vw, 6rem);
    color: var(--primary-color);
    text-shadow:
      0 4px 6px var(--shadow-color),
      0 0 10px var(--accent-color);
    margin: 0 0 0.25em 0;
    opacity: 0;
  }

  h2 {
    font-weight: 600;
    font-size: clamp(1rem, 3vw, 1.5rem);
    color: var(--primary-color);
    margin: 0 0 1.5em 0;
    opacity: 0;
  }

  #fireworksCanvas {
    position: fixed;
    top: 0; left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 0;
  }

  #balloons {
    position: fixed;
    top: 0; left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 0;
  }

  button {
    background-color: var(--button-bg);
    border: none;
    padding: 1em 2em;
    font-size: 1.25rem;
    font-weight: 600;
    border-radius: 12px;
    color: var(--primary-color);
    cursor: pointer;
    box-shadow: 0 6px 10px var(--shadow-color);
    transition: background-color 0.3s ease;
    margin: 1em 0;
  }
  button:hover, button:focus {
    background-color: var(--button-hover-bg);
    outline: none;
  }

  #mailButton {
    display: none;
  }

  #emotionalNote {
    max-width: 400px;
    margin: 1em auto 0;
    padding: 1em 1.5em;
    background: var(--accent-color);
    color: var(--primary-color);
    border-radius: 12px;
    font-style: italic;
    box-shadow: 0 4px 8px var(--shadow-color);
    display: none;
    text-align: left;
  }

  /* Text fade & slide up animation */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    } to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .fade-in {
    animation: fadeInUp 1.5s forwards;
  }

  @media (max-width: 480px) {
    h1 {
      font-size: 4rem;
    }
    h2 {
      font-size: 1rem;
    }
  }
</style>
</head>

<body>

<canvas id="fireworksCanvas"></canvas>
<div id="balloons"></div>

<div id="container" role="main" aria-label="Caesar's birthday celebration page">
  <h1 id="mainMsg" style="display:none;">Happy Birthday, <span id="nameSpan"></span>! 🎉</h1>
  <h2 id="subMsg" style="display:none;">Wishing you joy, success, and happiness</h2>

  <button id="playSongBtn" style="display:none;" aria-label="Play birthday song">Play Favorite Song</button>
  <button id="mailButton" aria-label="Open birthday note">📧 Open Birthday Note</button>

  <div id="emotionalNote" aria-live="polite">
    <p>Dear Fiza,</p>
    <p>On your special day, I want to thank you for being my childhood friend — someone who's stood by me through every laugh and tear.</p>
    <p>Yaad ha jab wo pc hashir tumhari integrity ke mazay le ra tha ? I was there for you, and I always will be.</p>
    <p>Wishing you a life full of joy, success, and endless happiness. You deserve nothing less.</p>
    <p>Thank you for being you.</p>
    <p>With all my heart,<br>Huzaifa </p>
  </div>
</div>

<!-- Hidden audio element - add your own mp3 file name in src -->
<audio id="birthdayAudio" src="hbd12.mp3" preload="auto"></audio>

<script>
  // Balloon animation code (same as before)
  const balloonsContainer = document.getElementById('balloons');
  class Balloon {
    constructor() {
      this.size = Math.random() * 30 + 20;
      this.x = Math.random() * window.innerWidth;
      this.y = window.innerHeight + this.size;
      this.color = `hsl(${Math.random() * 360}, 70%, 70%)`;
      this.speed = Math.random() * 1 + 0.5;
      this.element = document.createElement('div');
      this.element.style.position = 'fixed';
      this.element.style.bottom = `-${this.size}px`;
      this.element.style.left = `${this.x}px`;
      this.element.style.width = `${this.size}px`;
      this.element.style.height = `${this.size * 1.3}px`;
      this.element.style.background = this.color;
      this.element.style.borderRadius = '50% 50% 50% 50% / 60% 60% 40% 40%';
      this.element.style.boxShadow = `inset -3px -3px 10px rgba(255,255,255,0.3)`;
      this.element.style.opacity = '0.8';
      this.element.style.zIndex = '0';
      balloonsContainer.appendChild(this.element);
    }
    update() {
      this.y -= this.speed;
      this.x += Math.sin(this.y / 30) * 0.5;
      if (this.y + this.size < 0) {
        this.y = window.innerHeight + this.size;
        this.x = Math.random() * window.innerWidth;
      }
      this.element.style.bottom = `${this.y}px`;
      this.element.style.left = `${this.x}px`;
    }
  }
  const balloons = [];
  for(let i=0; i<15; i++) {
    balloons.push(new Balloon());
  }
  function animateBalloons() {
    balloons.forEach(b => b.update());
    requestAnimationFrame(animateBalloons);
  }
  animateBalloons();
  // Upgrade fireworks code snippet to replace your old fireworks code

class FireworkParticle {
  constructor(x, y, color, angle, speed, shape='circle') {
    this.x = x;
    this.y = y;
    this.color = color;
    this.speed = speed;
    this.angle = angle;
    this.alpha = 1;
    this.size = Math.random() * 3 + 2;
    this.shape = shape;
    this.friction = 0.92;
    this.gravity = 0.06;
    this.vx = Math.cos(this.angle) * this.speed;
    this.vy = Math.sin(this.angle) * this.speed;
    this.trail = [];
  }
  update() {
    this.vx *= this.friction;
    this.vy *= this.friction;
    this.vy += this.gravity;
    this.x += this.vx;
    this.y += this.vy;
    this.alpha -= 0.015;
    if (this.alpha < 0) this.alpha = 0;
    this.trail.push({x: this.x, y: this.y, alpha: this.alpha});
    if (this.trail.length > 10) this.trail.shift();
  }
  draw(ctx) {
    ctx.save();
    ctx.globalAlpha = this.alpha;

    // Draw trail
    ctx.beginPath();
    for(let i = 0; i < this.trail.length - 1; i++) {
      const p0 = this.trail[i];
      const p1 = this.trail[i + 1];
      ctx.strokeStyle = this.color.replace('1)', `${p0.alpha})`);
      ctx.lineWidth = (i + 1) / this.trail.length * this.size;
      ctx.moveTo(p0.x, p0.y);
      ctx.lineTo(p1.x, p1.y);
    }
    ctx.stroke();

    // Draw particle shape
    ctx.fillStyle = this.color;
    ctx.translate(this.x, this.y);
    switch(this.shape) {
      case 'star':
        drawStar(ctx, 5, this.size);
        break;
      case 'heart':
        drawHeart(ctx, this.size);
        break;
      default:
        ctx.beginPath();
        ctx.arc(0, 0, this.size, 0, Math.PI * 2);
        ctx.fill();
    }
    ctx.restore();
  }
}

// Helper to draw star shape
function drawStar(ctx, points, radius) {
  ctx.beginPath();
  for (let i = 0; i < points * 2; i++) {
    const angle = (Math.PI / points) * i;
    const r = i % 2 === 0 ? radius : radius / 2;
    ctx.lineTo(Math.cos(angle) * r, Math.sin(angle) * r);
  }
  ctx.closePath();
  ctx.fill();
}

// Helper to draw heart shape
function drawHeart(ctx, size) {
  ctx.beginPath();
  ctx.moveTo(0, size / 4);
  ctx.bezierCurveTo(size / 2, -size / 2, size * 1.5, size / 3, 0, size);
  ctx.bezierCurveTo(-size * 1.5, size / 3, -size / 2, -size / 2, 0, size / 4);
  ctx.fill();
}

let fireworks = [];

function createFireworkExplosion(x, y) {
  const count = 80 + Math.floor(Math.random() * 40);
  const shapes = ['circle', 'star', 'heart'];
  for(let i = 0; i < count; i++) {
    const angle = Math.random() * 2 * Math.PI;
    const speed = Math.random() * 6 + 3;
    const color = `hsla(${Math.random() * 360}, 100%, 70%, 1)`;
    const shape = shapes[Math.floor(Math.random() * shapes.length)];
    fireworks.push(new FireworkParticle(x, y, color, angle, speed, shape));
  }
}

// Clear and animate fireworks with trail and fade
function animateFireworks() {
  ctx.fillStyle = 'rgba(0, 0, 0, 0.15)';  // subtle trail effect background (instead of clearRect)
  ctx.fillRect(0, 0, cw, ch);

  for(let i = fireworks.length - 1; i >= 0; i--) {
    let p = fireworks[i];
    p.update();
    p.draw(ctx);
    if(p.alpha <= 0) fireworks.splice(i, 1);
  }
  requestAnimationFrame(animateFireworks);
}
animateFireworks();

// Play sound on firework explosion (optional, add sound file and call playFireworkSound())

function playFireworkSound() {
  // Placeholder: add your own firework pop sound logic here.
  // Example: new Audio('firework-pop.mp3').play();
}

// Explode fireworks with sound
window.addEventListener('click', e => {
  createFireworkExplosion(e.clientX, e.clientY);
  playFireworkSound();
});


   // Run on load
  window.onload = askName;
</script>

</body>
</html>
